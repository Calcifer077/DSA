Abstract class is a restricted class that cannot be used to create objects.

.........................................................................................
.........................................................................................

Super keyword is used to refer to the parent class.

Usage of Java super Keyword: 
1. 'super' can be used to refer immediate parent class instance variable.
2. 'super' can be used to invoke immediate parent class method.
3. 'super()' can be used to invoke immediate parent class constructor.

.........................................................................................
.........................................................................................
@Override function is used to indicate that the method of the child class is overriding the method of the Base class.
It is also used for improving code reusabilty.
.........................................................................................
.........................................................................................
Final keyword :--->
It is used to restrict the user.
It can be used in many contexts:
1. Variable ---> To create constant variable
2. Method ---> To prevent method overriding
3. classes ---> To prevent inheritance

If you were to change the value of a final variable, try to override a final method or try to extend a final class, you will get a compile time error.
You can inherit a final method but cannot override it.
A final variable that is not initialized at the time of declaration is known as blank final variable. It can be only initialized by the constructor.
We cannot declare a constructor as final because a constructor is inherited.
.........................................................................................
.........................................................................................

Constructor -> A constructor is a block of codes similar to the method. It is called when an instance of the class is created. At the time of calling constructor, memory for the object is allocated in the memory.
Every time an object is created using the new() keyword, at least one constructor is called.
It calls a default constructor if there is no constructor available in the class. In such case, Java compiler provides a default constructor by default.
It is called constructor because it constructs the values at the time of object creation. It is not necessary to write a constructor for a class. It is because java compiler creates a default constructor if your class doesn't have any.

Rules for creating Java constructor:
1. Constructor name must be the same as its class name
2. A Constructor must have no explicit return type
3. A Java constructor cannot be abstract, static, final, and synchronized

There are two types of constructors in Java:
1. Default constructor (no-arg constructor) -> The default constructor is used to provide the default values to the object like 0, null, etc., depending on the type.
2. Parameterized constructor -> The parameterized constructor is used to provide different values to distinct objects. However, you can provide the same values also.

There is no copy constructor in Java. However, we can copy the values from one object to another like copy constructor in C++.
.........................................................................................
.........................................................................................

Java static property is shared to all objects.
Static -> The static keyword in Java is used for memory management mainly.

1) Java static variable -> If you declare any variable as static, it is known as a static variable.
  The static variable can be used to refer to the common property of all objects (which is not unique for each object), for example, the company name of employees, college name of students, etc.
  The static variable gets memory only once in the class area at the time of class loading.
Advantages of static variable -> It makes your program memory efficient (i.e., it saves memory).

2) Java static method -> If you apply static keyword with any method, it is known as static method.
  A static method belongs to the class rather than the object of a class.
  A static method can be invoked without the need for creating an instance of a class.
  A static method can access static data member and can change the value of it.
Restrictions for the static method -> 
  The static method can not use non static data member or call non-static method directly.
  'this' and 'super' cannot be used in static context.

3) Java static block -> 
  Is used to initialize the static data member.
  It is executed before the main method at the time of classloading.

.........................................................................................
.........................................................................................

this -> 'this' is a reference variable that refers to the current object.
Here is given the 6 usage of java this keyword:
1. 'this' can be used to refer current class instance variable.
2. 'this' can be used to invoke current class method (implicitly)
3. 'this()' can be used to invoke current class constructor.
4. 'this' can be passed as an argument in the method call.
5. 'this' can be passed as argument in the constructor call.
6. 'this' can be used to return the current class instance from the method.

.........................................................................................
.........................................................................................

Inheritance -> Inheritance in Java is a mechanism in which one object acquires all the properties and behaviors of a parent object.
Inheritance represents the IS-A relationship which is also known as a parent-child relationship.
Why use inheritance in java?
1. For Method Overriding (so runtime polymorphism can be achieved).
2. For Code Reusability.

Terms used in Inheritance ->
1. Class: A class is a group of objects which have common properties. It is a template or blueprint from which objects are created.
2. Sub Class/Child Class: Subclass is a class which inherits the other class. It is also called a derived class, extended class, or child class.
3. Super Class/Parent Class: Superclass is the class from where a subclass inherits the features. It is also called a base class or a parent class.
4. Reusability: As the name specifies, reusability is a mechanism which facilitates you to reuse the fields and methods of the existing class when you create a new class. You can use the same fields and methods already defined in the previous class.

In the terminology of Java, a class which is inherited is called a parent or superclass, and the new class is called child or subclass.

On the basis of class, there can be three types of inheritance in java: single, multilevel and hierarchical.
Multiple inheritance is not supported in Java through class.
To reduce the complexity and simplify the language, multiple inheritance is not supported in java. To resolve the problem of ambiguity.

.........................................................................................
.........................................................................................

Polymorphism in Java is a concept by which we can perform a single action in different ways. Polymorphism is derived from 2 Greek words: poly and morphs. The word "poly" means many and "morphs" means forms.
There are two types of polymorphism in Java: compile-time polymorphism and runtime polymorphism. We can perform polymorphism in java by method overloading and method overriding.

Runtime polymorphism or Dynamic Method Dispatch is a process in which a call to an overridden method is resolved at runtime rather than compile-time.

.........................................................................................
.........................................................................................

Method overloading -> If a class has multiple methods having same name but different in parameters, it is known as Method Overloading.
  If we have to perform only one operation, having same name of the methods increases the readability of the program
Method overloading increases the readability of the program.

There are two ways to overload the method in java:
1. By changing number of arguments
2. By changing the data type
Method Overloading is not possible by changing the return type of the method only.
In java, method overloading is not possible by changing the return type of the method only because of ambiguity.

We can overload main method in java. We can have any number of main methods in a class by method overloading. But JVM calls main() method which receives string(String[] args) array as arguments only


Method overriding -> If subclass (child class) has the same method as declared in the parent class, it is known as method overriding in Java. In other words, If a subclass provides the specific implementation of the method that has been declared by one of its parent class, it is known as method overriding.

Usage of Java Method Overriding -> 
1. Method overriding is used to provide the specific implementation of a method which is already provided by its superclass.
2. Method overriding is used for runtime polymorphism.

Rules for Java Method Overriding -> 
1. The method must have the same name as in the parent class
2. The method must have the same parameter as in the parent class.
3. There must be an IS-A relationship (inheritance).

A static method cannot be overridden.
It is because the static method is bound with class whereas instance method is bound with an object. Static belongs to the class area, and an instance belongs to the heap area.

.........................................................................................
.........................................................................................

Abstraction is a process of hiding the implementation details and showing only functionality to the user.
There are two ways to achieve abstraction in java:
1. Abstract class (0 to 100%)
2. Interface (100%)
Abstract class -> A class which is declared with the abstract keyword is known as an abstract class in Java. It can have abstract and non-abstract methods (method with the body). It needs to be extended and its method implemented. It cannot be instantiated.
Points to Remember
1. An abstract class must be declared with an abstract keyword.
2. It can have abstract and non-abstract methods.
3. It cannot be instantiated.
4. It can have constructors and static methods also.
5. It can have final methods which will force the subclass not to change the body of the method.
  A method which is declared as abstract and does not have implementation is known as an abstract method.

.........................................................................................
.........................................................................................

File Handling is used to store data in the permanent memory.
To know about the information of the file you must include:
" imort java.io.File; "

Java File class methods:
boolean canRead() -> Check whether we can read the data or not.
boolean createNewFile() -> used to create a new emoty file.
boolean canWrite() -> check whether we can write the data into the file or not.
boolean exists() -> used to check whether the specified file is present or not.
boolean delete() -> used to delete a file.
String getName() -> used to find the file name.
String getAbsolutePath()	-> used to get the absolute pathname of the file.


Several exceptions in the java.io package might occur when you are working with files and streams.

-> A FileNotFound exception occurs when you try to create a stream or file object using a file that couldn’t be located.
-? An EOFException indicates that the end of a file has been reached unexpectedly as data was being read from the file through an input stream.
These exceptions are subclasses of IOException. One way to deal with all of them is to enclose all input and output statements in a try-catch block that catches IOException objects. Call the exception’s toString() or getMessage() methods in the catch block to find out more about the problem

InputStream	-> Abstract class containing methods for performing input. to read data from a destination, it may be a file, an array, peripheral devices or socket.
OutputStream -> Abstract class containing methods for performing output, to write data to a source, it may be a file, an array, peripheral device or socket.
FileInputStream	-> Child of InputStream that provides the capability to read from disk files. For reading streams of characters FileReader class is recommended.
FileOutputStream -> Child of OutputStream that provides the capability to write to disk files. If you have to write primitive values into a file. We can write charcter oriented as well, but for this FileWriter is recommended.
PrintStream	-> Child of FilterOutputStream, which is a child of OutputStream; PrintStream handles output to a system’s standard (or default) output device, usually the monitor
BufferedInputStream	-> Child of FilterInputStream, which is a child of InputStream; BufferedInputStream handles input from a system’s standard (or default) input device, usually the keyboard.


.........................................................................................
.........................................................................................

Stream represents the pipleline through which data will flow and the funcitons to operate on data.

ByteArrayInputStream is used to read byte array as a input stream.
ByteArrayOutputStream is used to write byte array in more than one file at a time.

PipedWriter and PipedReader are used to read a stream of characters.
These two classes are used in pairs.

.........................................................................................
.........................................................................................

Serialization -> It is a mechanism where an object can be represented as a sequence of bytes that include's the object's data as well as information about the object's type and the types of data stored in the object.

After a serialized object has been written into a file, it can be read from the file and deserialized that is, the type information and bytes that represent the object and its data can be used to recreate the object in memory.

Most impressive is that the entire process is JVM independent, meaning an object can be serialized on one platform and deserialized on an entirely different platform.

.........................................................................................
.........................................................................................
Multitasking ---> It is the process when CPU allocate CPU time to different processes to complete their execution.
CPU divides specific time slices for each processes to execute their block of code.

Multithreading ---> It is the process in which OS divides a single process into multiple threads which can execute concurrently.

Synchronization is used when we have multiple threads trying to access a single resource.
The main pupose of Syncronization is to overcome the problem of multithreading when multiple threads try to access a single resource.
When using synchronization, this method will place a lock(a monitor) on an important object or piece code to make sure that only one thread can access it at the same time.
To protect data, below two things must be done:
1. Make the variables private.
2. Synchronize the code that modifies the variable.

Real life example of Synchronization:->
Suppose three people have a joint account in a bank and all three try to access the money at the same time.
Synchronization can be achieved by two ways:
1. Method level
2. Block level

.........................................................................................
.........................................................................................
Object Cloning ---> Object cloning is a way to create an exact copy of an object. The clone() method is used for implementation.
                        -> java.lang.Cloneable interface must be implemented.
                        -> The clone() method saves the extra proessing task for creating the exact copy of an object.If we perform it by                            using the 'new' keyword, it will take a lot of pocessing time.
                        
.........................................................................................
.........................................................................................
Exception -> A java exception is an object that describes an exceptional condition that has occurred in a piece of code. When an exceptional condition arises, an object representing that exception is created and thrown in the method that caused the error. That method may choose to handle the exception itself or pass it on. Either way, at some point, the exception is caught and processed.

There are two ways of handling exceptions:
1. Catch the exception and take corrective action
2. Throw the exception to the calling method which will force the calling method to handle it.  

Java exception handling is done using try...catch block. The try...catch block are used in pair.

The try statement allows you to define a block of code to be tested for errors while it is being executed.
The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

finally -> The finally statement lets you execute code, after try...catch, regardless of the result.

throw -> The throw statement allows you to create custom error. The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, FileNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.

The try...catch block can be nested.

.........................................................................................
.........................................................................................

AWT(Abstract window toolkit) -> used to make GUI or window based applications in java.
-> Components of awt are platform-dependent and heavyweight.
-> AWT has less control as the result can differ because of components are platform dependent.
-> AWT is platform independent not its components.

Why AWT is Platform Independent?
The Java AWT utilizes the native platform subroutine to create API components such as TextField, CheckBox, and buttons. This results in a different visual format for these components on different platforms such as Windows, MAC OS, and Unix. The reason for this is that each platform has a distinct view of its native components.

AWT is platform independent even after the AWT components are platform dependent because of the points mentioned below:
1. JVM is platform dependent.
2. Abstract APIs
3.  Platform-Independent Libraries

Different things in AWT:
-> Components: AWT provides various components such as buttons, labels, text fields, checkboxes, etc used for creating GUI elements for Java Applications.
-> Containers: AWT provides containers like panels, frames, and dialogues to organize and group components in the Application.
-> Layout Managers: Layout Managers are responsible for arranging data in the containers sone of the layout managers are BorderLayout, FlowLayout, etc.
-> Event Handling: AWT allows the user to handle the events like mouse clicks, key presses, etc. using event listeners and adapters.
-> Graphics and Drawing: It is the feature of AWT that helps to draw shapes, insert images and write text in the components of a Java Application.

Methods of component class:
public void add(Component c)	-> Inserts a component on this component.
public void setSize(int width,int height)	-> Sets the size (width and height) of the component.
public void setLayout(LayoutManager m)	-> Defines the layout manager for the component.
public void setVisible(boolean status)	-> Changes the visibility of the component, by default false.

* Container is a component that can contain other components.
Types of Containers in Java AWT
There are four types of containers in Java AWT:
-> Window: Window is a top-level container that represents a graphical window or dialog box. The Window class extends the Container class, which means it can contain other components, such as buttons, labels, and text fields.
-> Panel: Panel is a container class in Java. It is a lightweight container that can be used for grouping other components together within a window or a frame.
-> Frame: The Frame is the container that contains the title bar and border and can have menu bars.
-> Dialog: A dialog box is a temporary window an application creates to retrieve user input.


-> Label --> A Label object is a component for placing text in a container. A label displays a single line of read-only text. The text can be changed by the application, but a user cannot edit it directly.
-> Button --> AWT Button is a control component with a label that generates an event when clicked on. Button Class is used for creating a labeled button that is platform-independent.
-> TextField --> A TextField object is a text component that allows for the editing of a single line of text.
-> CheckBox --> It is used to turn an option on (true) or off (false). Clicking on a Checkbox changes its state from "on" to "off" or from "off" to "on".
-> CheckboxGroup --> CheckboxGroup Class is used to group together a set of Checkbox.
Note: CheckboxGroup enables the use of radio buttons in AWT.
-> Choice --> The Choice class displays a popup menu to the user, from which the user can pick an item.
-> Panel --> Java AWT Panel is a container class used to hold and organize graphical components in a Java Application.
-> Toolkit --> Java AWT Toolkit class provides us with a platform-independent way to access various system resources and functionalities. Subclasses of Toolkit are used to bind various components.

To create a simple awt:
1. By extending Frame class (inheritance)
2. By creating the object of Frame class (association)

Event handling:
Changing the state of an object is known as an event. For example, click on button, dragging mouse etc. The java.awt.event package provides many event classes and Listener interfaces for event handling.

Various type of event handling components:
1. Java ActionListener -> Java ActionListner is a interface which responds to the actions performed by the components like buttons, menu items ,etc.
2. Java MouseListener -> Java MouseListner is a interface that responds to the actions performed by mouse events generated by the user. Example: mouse clicks , mouse movements, etc.
3. Java MouseMotionListener -> Java MouseMotionListner is a interface which is notified when mouse is moved or dragged.
4. Java ItemListner -> Java ItemListner is an interface which handles events related to item selection and deselection those that occur with checkboxes, radio buttons, etc.
5. Java KeyListener -> Java KeyListner is an interface in Java notified whenever you change the state of key or can be said for key related events.(Key -> Keyboard)
6. Java WindowListener -> Java WindowListener is a interface used for handling events related to window actions. Events like opening , closing, minimizing, etc are handled using WindowListener.

* Close AWT Window -> At the end we will need to Close AWT Window, So to perform this task we will use dispose() method. This method releases the resources associated with the window and also removes it from the screen.

There are basically two types of classes in this. One that tells what event is done like ActionEvent, WindowEvent and the other one is that tells what to do with that event. These that do something with the event are Liseteners like ActionListener, MouseListener. You have to override thier function for proper implementation.
We can put the event handling code into one of the following places:
1. Within class
2. Other class
3. Anonymous class

.........................................................................................
.........................................................................................

java vs javax 
These are both used when we import pacakges.
java -> The java package holds the core classes or interfaces in the Java programming language. Most classes required to write basic Java programs are in the java package.
javax -> The javax package contains classes or interface that extend the functionality of java packages. It’s also known as an extension package.

java package contains the core Java Application Programming Interfaces (APIs). The javax package is an extension of the core java package. It provides additional classes built on top of the java package to add advanced features and functionalities.

Java is a collection of classes that enable or make up the runtime environment, JRE. Javax is a collection of packages that were later introduced but were kept separate from Java packages.

.........................................................................................
.........................................................................................



Swing -> is a part of Java Foundation classes(JFC are a set of GUI components which simplify the development of desktop applications.) that is used to create window based applications. It is built on the top of AWT (Abstract Windowing Toolkit) API and entirely written in java.

Unlike AWT, Java Swing provides platform-independent and lightweight components.

The javax.swing package provides classes for java swing API such as JButton, JTextField, JTextArea, JRadioButton, JCheckbox, JMenu, JColorChooser etc.

-> JButton --> The JButton class is used to create a labeled button that has platform independent implementation. The application result in some action when the button is pushed. It inherits AbstractButton class.
-> JLabel --> The object of JLabel class is a component for placing text in a container. It is used to display a single line of read only text. The text can be changed by an application but a user cannot edit it directly. It inherits JComponent class

.........................................................................................
.........................................................................................

Layout Manager -> The LayoutManagers are used to arrange components in a particular manner. The Java LayoutManagers facilitates us to control the positioning and size of the components in GUI forms. LayoutManager is an interface that is implemented by all the classes of layout managers.

.........................................................................................
.........................................................................................

Java Applet
Applet is a special type of program that is embedded in the webpage to generate the dynamic content. It runs inside the browser and works at client side.

java.applet.Applet class
For creating any applet java.applet.Applet class must be inherited. It provides 4 life cycle methods of applet:
1. public void init(): is used to initialized the Applet. It is invoked only once.
2. public void start(): is invoked after the init() method or browser is maximized. It is used to start the Applet.
3. public void stop(): is used to stop the Applet. It is invoked when Applet is stop or browser is minimized.
4. public void destroy(): is used to destroy the Applet. It is invoked only once.

init()(intialized the applet, invoked only once) -> start()(invoked after init() or when browser is maximized. used to start the applet) -> stop()(used to stop the applet. invoked when applet stopped or browser is minimized) -> destroy()(used to destroy the applet, invoked only once)

java.awt.Component class
The Component class provides 1 life cycle method of applet.
1. public void paint(Graphics g): is used to paint the Applet. It provides Graphics class object that can be used for drawing oval, rectangle, arc etc.

Java Plug-in software is responsible to manage the life cycle of an applet?

How to run an Applet?
There are two ways to run an applet:
1. By html file.
2. By appletViewer tool (for testing purpose).

.........................................................................................
.........................................................................................

Threading:
Java provides Thread class to achieve thread programming.

Defining a Thread

In the most general sense, you create a thread by instantiating an object of type Thread.
Java defines two ways in which this can be accomplished:
1. You can implement the Runnable interface.
2. You can extend the Thread class

States of thread:
1. New
2. Active
3. Blocked / Waiting
4. Timed Waiting
5. Terminated

New: Whenever a new thread is created, it is always in the new state. For a thread in the new state, the code has not been run yet and thus has not begun its execution.
