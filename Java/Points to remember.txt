Abstract class is a restricted class that cannot be used to create objects.

.........................................................................................
.........................................................................................

Super keyword is used to refer to the parent class.

.........................................................................................
.........................................................................................
@Override function is used to indicate that the method of the child class is overriding the method of the Base class.
It is also used for improving code reusabilty.
.........................................................................................
.........................................................................................
Final keyword :--->
It is used to restrict the user.
It can be used in many contexts:
1. Variable ---> To create constant variable
2. Method ---> To prevent method overriding
3. classes ---> To prevent inheritance
.........................................................................................
.........................................................................................
File Handling is used to store data in the permanent memory.
To know about the information of the file you must include:
" imort java.io.File; "

Java File class methods:
boolean canRead() -> Check whether we can read the data or not.
boolean createNewFile() -> used to create a new emoty file.
boolean canWrite() -> check whether we can write the data into the file or not.
boolean exists() -> used to check whether the specified file is present or not.
boolean delete() -> used to delete a file.
String getName() -> used to find the file name.
String getAbsolutePath()	-> used to get the absolute pathname of the file.


Several exceptions in the java.io package might occur when you are working with files and streams.

-> A FileNotFound exception occurs when you try to create a stream or file object using a file that couldn’t be located.
-? An EOFException indicates that the end of a file has been reached unexpectedly as data was being read from the file through an input stream.
These exceptions are subclasses of IOException. One way to deal with all of them is to enclose all input and output statements in a try-catch block that catches IOException objects. Call the exception’s toString() or getMessage() methods in the catch block to find out more about the problem

InputStream	-> Abstract class containing methods for performing input. to write data to a destination, it may be a file, an array, peripheral devices or socket.
OutputStream -> Abstract class containing methods for performing output, to read data from a source, it may be a file, an array, peripheral device or socket.
FileInputStream	-> Child of InputStream that provides the capability to read from disk files.
FileOutputStream -> Child of OutputStream that provides the capability to write to disk files. If you have to write primitive values into a file. We can write charcter oriented as well, but for this FileWriter is recommended.
PrintStream	-> Child of FilterOutputStream, which is a child of OutputStream; PrintStream handles output to a system’s standard (or default) output device, usually the monitor
BufferedInputStream	-> Child of FilterInputStream, which is a child of InputStream; BufferedInputStream handles input from a system’s standard (or default) input device, usually the keyboard.


FileInputStream is used to read bytes from a file. It can also be used to read characters from a file.


To read characters from a file FileReader class is reccommended.
.........................................................................................
.........................................................................................
Stream represents the pipleline through which data will flow and the funcitons to operate on data.

ByteArrayInputStream is used to read byte array as a input stream.
ByteArrayOutputStream is used to write byte array in more than one file at a time.

PipedWriter and PipedReader are used to read a stream of characters.
These two classes are used in pairs.

.........................................................................................
.........................................................................................
Multitasking ---> It is the process when CPU allocate CPU time to different processes to complete their execution.
CPU divides specific time slices for each processes to execute their block of code.

Multithreading ---> It is the process in which OS divides a single process into multiple threads which can execute concurrently.

Synchronization is used when we have multiple threads trying to access a single resource.
The main pupose of Syncronization is to overcome the problem of multithreading when multiple threads try to access a single resource.
When using synchronization, this method will place a lock(a monitor) on an important object or piece code to make sure that only one thread can access it at the same time.
To protect data, below two things must be done:
1. Make the variables private.
2. Synchronize the code that modifies the variable.

Real life example of Synchronization:->
Suppose three people have a joint account in a bank and all three try to access the money at the same time.
Synchronization can be achieved by two ways:
1. Method level
2. Block level

.........................................................................................
.........................................................................................
Object Cloning ---> Object cloning is a way to create an exact copy of an object. The clone() method is used for implementation.
                        -> java.lang.Cloneable interface must be implemented.
                        -> The clone() method saves the extra proessing task for creating the exact copy of an object.If we perform it by                            using the 'new' keyword, it will take a lot of pocessing time.
                        
.........................................................................................
.........................................................................................
Excepion -> A java exception is an object that describes an exceptional condition that has occurred in a piece of code. When an exceptional condition arises, an object representing that exception is created and thrown in the method that caused the error. That method may choose to handle the exception itself or pass it on. Either way, at some point, the exception is caught and processed.

There are two ways of handling exceptions:
1. Catch the exception and take corrective action
2. Throw the exception to the calling method which will force the calling method to handle it.  

Java exception handling is done using try...catch block. The try...catch block are used in pair.

The try statement allows you to define a block of code to be tested for errors while it is being executed.
The catch statement allows you to define a block of code to be executed, if an error occurs in the try block.

finally -> The finally statement lets you execute code, after try...catch, regardless of the result.

throw -> The throw statement allows you to create custom error. The throw statement is used together with an exception type. There are many exception types available in Java: ArithmeticException, FileNotFoundException, ArrayIndexOutOfBoundsException, SecurityException, etc.

The try...catch block can be nested.
